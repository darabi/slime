Index: slime/slime.el
===================================================================
--- slime.orig/slime.el	2011-10-27 22:17:07.000000000 +0200
+++ slime/slime.el	2011-10-27 22:17:07.000000000 +0200
@@ -117,7 +117,7 @@
     "Return the datestring of the latest entry in the ChangeLog file.
 Return nil if the ChangeLog file cannot be found."
     (interactive "p")
-    (let ((changelog (concat slime-path "ChangeLog"))
+    (let ((changelog "/usr/share/doc/slime/changelog")
           (date nil))
       (when (file-exists-p changelog)
         (with-temp-buffer 
Index: slime/swank-loader.lisp
===================================================================
--- slime.orig/swank-loader.lisp	2011-10-27 22:17:07.000000000 +0200
+++ slime/swank-loader.lisp	2011-10-27 22:18:58.000000000 +0200
@@ -18,6 +18,10 @@
 ;;   (defparameter swank-loader::*fasl-directory* "/tmp/fasl/")
 ;;   (load ".../swank-loader.lisp")
 
+
+(handler-case (require :asdf)
+  (error () (load "/usr/share/common-lisp/source/cl-asdf/asdf.lisp")))
+
 (cl:defpackage :swank-loader
   (:use :cl)
   (:export :init
@@ -119,7 +123,7 @@
 (defun slime-version-string ()
   "Return a string identifying the SLIME version.
 Return nil if nothing appropriate is available."
-  (with-open-file (s (merge-pathnames "ChangeLog" *source-directory*)
+  (with-open-file (s "/usr/share/doc/cl-swank/changelog" 
                      :if-does-not-exist nil)
     (and s (symbol-name (read s)))))
 
@@ -136,10 +140,11 @@
 
 (defun binary-pathname (src-pathname binary-dir)
   "Return the pathname where SRC-PATHNAME's binary should be compiled."
-  (let ((cfp (compile-file-pathname src-pathname)))
-    (merge-pathnames (make-pathname :name (pathname-name cfp)
-                                    :type (pathname-type cfp))
-                     binary-dir)))
+  (declare (ignore binary-dir))
+  (let ((cfp (compile-file-pathname src-pathname)))    
+    (merge-pathnames (make-pathname 
+                      :directory `(:relative "swank" "fasl" ,(unique-dir-name)))
+                     (asdf:apply-output-translations cfp))))
 
 (defun handle-swank-load-error (condition context pathname)
   (fresh-line *error-output*)
